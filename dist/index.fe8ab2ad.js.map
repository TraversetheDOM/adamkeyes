{"mappings":"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","sources":["<anon>","src/js/portfolio.js"],"sourcesContent":["var $dc53f5b3fab8245e$exports = {};\n/**\n * Create a FormComponent class with all the elements in the form and the form itself.\n */ class $dc53f5b3fab8245e$var$FormComponent {\n    #form = /** @type {HTMLFormElement}*/ document.getElementById(\"form\");\n    #name = /** @type {HTMLInputElement} */ document.getElementById(\"name\");\n    #email = /** @type {HTMLInputElement} */ document.getElementById(\"email\");\n    #textarea = /** @type {HTMLTextAreaElement} */ document.getElementById(\"message\");\n    /**\n   * Takes in no argument or parameter\n   */ constructor(){\n        this.#form.addEventListener(\"submit\", this.#submitForm.bind(this));\n    }\n    /**\n   * @param {Event} evtObj - The event interface that takes place on the form.\n   * @return {void} - This method returns nothing\n   */ #submitForm(evtObj) {\n        this.#validateName(evtObj);\n        this.#validateEmail(evtObj);\n        this.#validateText(evtObj);\n    }\n    /**\n   * @param {Event} evtObj - The event interface that takes place on the form\n   * @return {void}\n   */ #validateText(evtObj) {\n        if (this.#textarea.value.trim() === \"\" || this.#textarea.validity.valueMissing) {\n            evtObj.preventDefault();\n            this.#showErrorState(this.#textarea, \"Please enter a text\");\n        }\n        // Check if the number of characters the user entered is shorter than expected\n        if (this.#textarea.validity.tooShort) {\n            evtObj.preventDefault();\n            this.#showErrorState(this.#textarea, \"Message is too short\");\n        }\n        //  Check if the number of characters the user entered is longer than the expected.\n        if (this.#textarea.validity.tooLong) {\n            evtObj.preventDefault();\n            this.#showErrorState(this.#textarea, \"Message is too long\");\n        }\n        // The user has met all the conditions for the rule to be valid.\n        if (this.#textarea.validity.valid) this.#showErrorState(this.#textarea, \"\");\n    }\n    /**\n   * @param {Event} evtObj - The event interface that takes place on the form.\n   * @return {void} - This method returns nothing\n   */ #validateEmail(evtObj) {\n        // Throw and error to the user if nothing is entered when the form is submitted.\n        if (this.#email.value.trim() === \"\" || this.#name.validity.valueMissing) {\n            evtObj.preventDefault();\n            this.#showErrorState(this.#email, \"Please enter an email\");\n        }\n        // If the user enters an email with no '@' or '.org', '.com', etc we throw and error.\n        if (this.#email.validity.typeMismatch) {\n            evtObj.preventDefault();\n            this.#showErrorState(this.#email, \"Sorry, invalid format here\");\n        }\n        // The user has met all the conditions for the field to be valid.\n        if (this.#email.validity.valid) this.#removeErrorState(this.#email, \"\");\n    }\n    /**\n   * @param {Event} evtObj - The event interface that takes place on the form.\n   * @return {void} - This method returns nothing\n   */ #validateName(evtObj) {\n        // Throw an error to the user if nothing is entered when the form is submitted.\n        if (this.#name.value.trim() === \"\" || this.#name.validity.valueMissing) {\n            evtObj.preventDefault();\n            this.#showErrorState(this.#name, \"Please enter a name\");\n        }\n        // Check if the number of characters the user entered is shorter than expected\n        if (this.#name.validity.tooShort) {\n            evtObj.preventDefault();\n            this.#showErrorState(this.#name, \"Name entered is too short\");\n        }\n        // Check if the number of characters the user entered is longer than the expected.\n        if (this.#name.validity.tooLong) {\n            evtObj.preventDefault();\n            this.#showErrorState(this.#name, \"Name entered is too long\");\n        }\n        // Check if the user enters a number and not a string.\n        if (this.#name.validity.patternMismatch) {\n            evtObj.preventDefault();\n            this.#showErrorState(this.#name, \"Please enter a name\");\n        }\n        // All other conditions should be valid.\n        if (this.#name.validity.valid) this.#removeErrorState(this.#name, \"\");\n    }\n    /**\n   *\n   * @param {HTMLInputElement | HTMLTextAreaElement} formElement - The input or the textarea element\n   * @param {string} message - The error message depending on what the user violates.\n   * @return {void}\n   */ #showErrorState(formElement, message) {\n        formElement.setAttribute(\"aria-invalid\", \"true\");\n        /**\n     * This block is used to handle error messages in a form\n     * It checks if the next sibling of the form element is a <p></p> with a class 'error-message'\n     * If it does, we want to assign a variable error-message to it.\n     * If it does not then we want to go to the next sibling.\n     * @type {Element | null | undefined} errorMessage\n     */ let errorMessage = null;\n        if (formElement.nextElementSibling?.classList.contains(\"error-message\")) errorMessage = formElement.nextElementSibling;\n        else {\n            errorMessage = formElement.nextElementSibling?.nextElementSibling;\n            if (formElement.nextElementSibling !== null) formElement.nextElementSibling.className = \"icon-error__show icon-error\";\n        }\n        if (errorMessage instanceof HTMLElement) {\n            errorMessage.innerText = message;\n            errorMessage.removeAttribute(\"hidden\");\n        } else return;\n    }\n    /**\n   *\n   * @param {HTMLInputElement | HTMLTextAreaElement} formElement - The input or the textarea element\n   * @param {string} message - The error message depending on what the user violates.\n   * @return {void}\n   */ #removeErrorState(formElement, message) {\n        formElement.setAttribute(\"aria-invalid\", \"false\");\n        /**\n     * This block is used to handle error messages in a form\n     * It checks if the next sibling of the form element is a <p></p> with a class 'error-message'\n     * If it does, we want to assign a variable error-message to it.\n     * If it does not then we want to go to the next sibling.\n     * @type {Element | null | undefined} errorMessage\n     */ let errorMessage = null;\n        if (formElement.nextElementSibling?.classList.contains(\"error-message\")) errorMessage = formElement.nextElementSibling;\n        else {\n            errorMessage = formElement.nextElementSibling?.nextElementSibling;\n            if (formElement.nextElementSibling !== null) formElement.nextElementSibling.className = \"icon-error__hide icon-error\";\n        }\n        if (errorMessage instanceof HTMLElement) {\n            errorMessage.innerText = message;\n            errorMessage.setAttribute(\"hidden\", \"hidden\");\n        } else return;\n    }\n}\nnew $dc53f5b3fab8245e$var$FormComponent(); // /**\n //  * The class sets up the blue print for bootstrapping the animations\n //  */\n // class BootstrapAnimation {\n //   #target;\n //   /**\n //    *\n //    * @param {Node} target - The elements that we will be observing\n //    */\n //   constructor(target) {\n //     this.#target = target;\n //     this.#observeIntersection();\n //   }\n //   /**\n //    *\n //    * @param {Array<IntersectionObserverEntry>} entries\n //    * @param {IntersectionObserver} observer\n //    */\n //   #handleIntersection(entries, observer) {\n //     entries.forEach((entry) => {\n //       if (entry.isIntersecting) {\n //         entry.target.classList.add('OnIt');\n //         if (this.#target instanceof Element) {\n //           observer.unobserve(this.#target);\n //         }\n //       }\n //     });\n //   }\n //   /**\n //    * This method will be called in the constructor to start the intersection observer.\n //    */\n //   #observeIntersection() {\n //     const observerOptions = {\n //       root: null,\n //       threshold: 0.2,\n //       rootMargin: '20px 0px 0px 0px'\n //     };\n //     const observer = new IntersectionObserver(\n //       this.#handleIntersection.bind(this),\n //       observerOptions\n //     );\n //     if (this.#target instanceof Element) {\n //       observer.observe(this.#target);\n //     }\n //   }\n // }\n // /**\n //  * The function will instantiate a class that would bootstrap the animation of the page when it loads. You should also be able to use window.addEventListener('load', callback)\n //  * @return {void}\n //  */\n // function animateOnIt() {\n //   const sections = /** @type {NodeList}*/ (\n //     document.querySelectorAll('.animate')\n //   );\n //   sections.forEach(function (section) {\n //     // Here due to line breaks which is interpreted as text node, the div element is the second child node in the section element while traversing the DOM.\n //     const target = section.childNodes[1];\n //     new BootstrapAnimation(target);\n //   });\n // }\n // animateOnIt();\n\n\n//# sourceMappingURL=index.fe8ab2ad.js.map\n","/**\n * Create a FormComponent class with all the elements in the form and the form itself.\n */\nclass FormComponent {\n  #form = /** @type {HTMLFormElement}*/ (document.getElementById('form'));\n  #name = /** @type {HTMLInputElement} */ (document.getElementById('name'));\n  #email = /** @type {HTMLInputElement} */ (document.getElementById('email'));\n  #textarea = /** @type {HTMLTextAreaElement} */ (\n    document.getElementById('message')\n  );\n\n  /**\n   * Takes in no argument or parameter\n   */\n  constructor() {\n    this.#form.addEventListener('submit', this.#submitForm.bind(this));\n  }\n\n  /**\n   * @param {Event} evtObj - The event interface that takes place on the form.\n   * @return {void} - This method returns nothing\n   */\n  #submitForm(evtObj) {\n    this.#validateName(evtObj);\n    this.#validateEmail(evtObj);\n    this.#validateText(evtObj);\n  }\n\n  /**\n   * @param {Event} evtObj - The event interface that takes place on the form\n   * @return {void}\n   */\n  #validateText(evtObj) {\n    if (\n      this.#textarea.value.trim() === '' ||\n      this.#textarea.validity.valueMissing\n    ) {\n      evtObj.preventDefault();\n      this.#showErrorState(this.#textarea, 'Please enter a text');\n    }\n\n    // Check if the number of characters the user entered is shorter than expected\n    if (this.#textarea.validity.tooShort) {\n      evtObj.preventDefault();\n      this.#showErrorState(this.#textarea, 'Message is too short');\n    }\n\n    //  Check if the number of characters the user entered is longer than the expected.\n    if (this.#textarea.validity.tooLong) {\n      evtObj.preventDefault();\n      this.#showErrorState(this.#textarea, 'Message is too long');\n    }\n\n    // The user has met all the conditions for the rule to be valid.\n    if (this.#textarea.validity.valid) {\n      this.#showErrorState(this.#textarea, '');\n    }\n  }\n\n  /**\n   * @param {Event} evtObj - The event interface that takes place on the form.\n   * @return {void} - This method returns nothing\n   */\n  #validateEmail(evtObj) {\n    // Throw and error to the user if nothing is entered when the form is submitted.\n    if (this.#email.value.trim() === '' || this.#name.validity.valueMissing) {\n      evtObj.preventDefault();\n      this.#showErrorState(this.#email, 'Please enter an email');\n    }\n\n    // If the user enters an email with no '@' or '.org', '.com', etc we throw and error.\n    if (this.#email.validity.typeMismatch) {\n      evtObj.preventDefault();\n      this.#showErrorState(this.#email, 'Sorry, invalid format here');\n    }\n\n    // The user has met all the conditions for the field to be valid.\n    if (this.#email.validity.valid) {\n      this.#removeErrorState(this.#email, '');\n    }\n  }\n\n  /**\n   * @param {Event} evtObj - The event interface that takes place on the form.\n   * @return {void} - This method returns nothing\n   */\n  #validateName(evtObj) {\n    // Throw an error to the user if nothing is entered when the form is submitted.\n    if (this.#name.value.trim() === '' || this.#name.validity.valueMissing) {\n      evtObj.preventDefault();\n      this.#showErrorState(this.#name, 'Please enter a name');\n    }\n\n    // Check if the number of characters the user entered is shorter than expected\n    if (this.#name.validity.tooShort) {\n      evtObj.preventDefault();\n      this.#showErrorState(this.#name, 'Name entered is too short');\n    }\n\n    // Check if the number of characters the user entered is longer than the expected.\n    if (this.#name.validity.tooLong) {\n      evtObj.preventDefault();\n      this.#showErrorState(this.#name, 'Name entered is too long');\n    }\n\n    // Check if the user enters a number and not a string.\n    if (this.#name.validity.patternMismatch) {\n      evtObj.preventDefault();\n      this.#showErrorState(this.#name, 'Please enter a name');\n    }\n\n    // All other conditions should be valid.\n    if (this.#name.validity.valid) {\n      this.#removeErrorState(this.#name, '');\n    }\n  }\n\n  /**\n   *\n   * @param {HTMLInputElement | HTMLTextAreaElement} formElement - The input or the textarea element\n   * @param {string} message - The error message depending on what the user violates.\n   * @return {void}\n   */\n  #showErrorState(formElement, message) {\n    formElement.setAttribute('aria-invalid', 'true');\n    /**\n     * This block is used to handle error messages in a form\n     * It checks if the next sibling of the form element is a <p></p> with a class 'error-message'\n     * If it does, we want to assign a variable error-message to it.\n     * If it does not then we want to go to the next sibling.\n     * @type {Element | null | undefined} errorMessage\n     */\n    let errorMessage = null;\n\n    if (formElement.nextElementSibling?.classList.contains('error-message')) {\n      errorMessage = formElement.nextElementSibling;\n    } else {\n      errorMessage = formElement.nextElementSibling?.nextElementSibling;\n      if (formElement.nextElementSibling !== null) {\n        formElement.nextElementSibling.className =\n          'icon-error__show icon-error';\n      }\n    }\n\n    if (errorMessage instanceof HTMLElement) {\n      errorMessage.innerText = message;\n      errorMessage.removeAttribute('hidden');\n    } else {\n      return;\n    }\n  }\n\n  /**\n   *\n   * @param {HTMLInputElement | HTMLTextAreaElement} formElement - The input or the textarea element\n   * @param {string} message - The error message depending on what the user violates.\n   * @return {void}\n   */\n  #removeErrorState(formElement, message) {\n    formElement.setAttribute('aria-invalid', 'false');\n    /**\n     * This block is used to handle error messages in a form\n     * It checks if the next sibling of the form element is a <p></p> with a class 'error-message'\n     * If it does, we want to assign a variable error-message to it.\n     * If it does not then we want to go to the next sibling.\n     * @type {Element | null | undefined} errorMessage\n     */\n    let errorMessage = null;\n\n    if (formElement.nextElementSibling?.classList.contains('error-message')) {\n      errorMessage = formElement.nextElementSibling;\n    } else {\n      errorMessage = formElement.nextElementSibling?.nextElementSibling;\n      if (formElement.nextElementSibling !== null) {\n        formElement.nextElementSibling.className =\n          'icon-error__hide icon-error';\n      }\n    }\n\n    if (errorMessage instanceof HTMLElement) {\n      errorMessage.innerText = message;\n      errorMessage.setAttribute('hidden', 'hidden');\n    } else {\n      return;\n    }\n  }\n}\n\nnew FormComponent();\n\n// /**\n//  * The class sets up the blue print for bootstrapping the animations\n//  */\n// class BootstrapAnimation {\n//   #target;\n\n//   /**\n//    *\n//    * @param {Node} target - The elements that we will be observing\n//    */\n//   constructor(target) {\n//     this.#target = target;\n//     this.#observeIntersection();\n//   }\n\n//   /**\n//    *\n//    * @param {Array<IntersectionObserverEntry>} entries\n//    * @param {IntersectionObserver} observer\n//    */\n//   #handleIntersection(entries, observer) {\n//     entries.forEach((entry) => {\n//       if (entry.isIntersecting) {\n//         entry.target.classList.add('OnIt');\n//         if (this.#target instanceof Element) {\n//           observer.unobserve(this.#target);\n//         }\n//       }\n//     });\n//   }\n\n//   /**\n//    * This method will be called in the constructor to start the intersection observer.\n//    */\n//   #observeIntersection() {\n//     const observerOptions = {\n//       root: null,\n//       threshold: 0.2,\n//       rootMargin: '20px 0px 0px 0px'\n//     };\n\n//     const observer = new IntersectionObserver(\n//       this.#handleIntersection.bind(this),\n//       observerOptions\n//     );\n\n//     if (this.#target instanceof Element) {\n//       observer.observe(this.#target);\n//     }\n//   }\n// }\n\n// /**\n//  * The function will instantiate a class that would bootstrap the animation of the page when it loads. You should also be able to use window.addEventListener('load', callback)\n//  * @return {void}\n//  */\n// function animateOnIt() {\n//   const sections = /** @type {NodeList}*/ (\n//     document.querySelectorAll('.animate')\n//   );\n//   sections.forEach(function (section) {\n//     // Here due to line breaks which is interpreted as text node, the div element is the second child node in the section element while traversing the DOM.\n//     const target = section.childNodes[1];\n//     new BootstrapAnimation(target);\n//   });\n// }\n\n// animateOnIt();\n"],"names":["$dc53f5b3fab8245e$var$FormComponent","form","document","getElementById","name","email","textarea","constructor","addEventListener","submitForm","bind","evtObj","validateName","validateEmail","validateText","value","trim","validity","valueMissing","preventDefault","showErrorState","tooShort","tooLong","valid","typeMismatch","removeErrorState","patternMismatch","formElement","message","setAttribute","errorMessage","nextElementSibling","classList","contains","className","HTMLElement","innerText","removeAttribute"],"version":3,"file":"index.fe8ab2ad.js.map"}